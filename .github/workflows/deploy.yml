name: Deploy to GitHub Pages

# Defines when this workflow will run
on:
  # Trigger the workflow on push events but only for the main branch
  push:
    branches: [ "main" ]
  # Trigger the workflow on pull request events but only for the main branch
  pull_request:
    branches: [ "main" ]
  # Allow manual triggering of the workflow
  workflow_dispatch:

# Define permissions needed for GitHub Pages
permissions:
  contents: read  # Allows the workflow to read repository contents
  pages: write    # Allows the workflow to deploy to GitHub Pages
  id-token: write # Allows the workflow to verify the deployment

# Ensure only one deployment happens at a time
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Lint and validate stage
  validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install HTML validator
        run: npm install -g html-validator-cli
        
      - name: Validate HTML
        run: |
          echo "Validating HTML files..."
          html-validator --file index.html --verbose

      - name: Install Stylelint
        run: |
          npm init -y
          npm install --save-dev stylelint stylelint-config-standard
          echo "{
            \"extends\": \"stylelint-config-standard\",
            \"rules\": {
              \"custom-property-no-missing-var-function\": null,
              \"property-no-vendor-prefix\": null,
              \"value-no-vendor-prefix\": null,
              \"font-family-no-missing-generic-family-keyword\": null,
              \"alpha-value-notation\": null
            }
          }" > .stylelintrc.json
        
      - name: Validate CSS
        run: |
          echo "Validating CSS files with Stylelint..."
          npx stylelint "**/*.css" --fix || true
          npx stylelint "**/*.css"

  # Test stage
  test:
    name: Run Tests
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check file existence
        run: |
          echo "Checking required files..."
          test -f index.html || exit 1
          test -f styles.css || exit 1
          test -f README.md || exit 1
          
      - name: Check HTML structure
        run: |
          echo "Checking HTML structure..."
          grep -q "<title>" index.html || exit 1
          grep -q "<body>" index.html || exit 1

  # Build stage
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        with:
          # Automatically create a .nojekyll file
          static_site_generator: "html"
          enablement: true
        
      - name: Build site
        run: |
          echo "Building site..."
          # Create a _site directory for the built content
          mkdir -p _site
          # Copy all files to _site directory
          cp -r index.html styles.css README.md _site/
          # Create .nojekyll file to bypass Jekyll processing
          touch _site/.nojekyll
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

  # Deploy stage
  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          # Enable the deployment
          enablement: true

  # Notification stage
  notify:
    name: Send Notifications
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Site is live at: ${{ needs.deploy.outputs.page_url }}"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi 